name: Tests

on:
  push:
    branches: [ master ]
    tags: [ '[0-9]+.[0-9]+.[0-9]+*' ]
  pull_request:
    branches: [ master ]

env:
  CIBW_TEST_COMMAND: python -m unittest
  CIBW_SKIP: pp*
  # Pass through to container
  CIBW_ENVIRONMENT_PASS_LINUX: HATCH_BUILD_HOOKS_ENABLE

jobs:

  linters:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: run linters
      # pre-commit also runs in pre-commit.ci, but let's have it here too
      # to block `pypi-publish` job from triggering if pre-commit fails
      run: |
        pre-commit run -a

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['pypy-3.7', '3.7', '3.8', '3.9', '3.10', '3.11-dev']
        os: [ubuntu-latest, macos-latest, windows-latest]
    continue-on-error: ${{ matrix.python-version == '3.11-dev' }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package and test deps
      run: |
        pip install . coverage

    - name: Test with unittest
      run: |
        coverage run -m unittest
        coverage report --fail-under=100

    - name: Report coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v2

  binary-wheels-standard:
    name: Binary wheels for ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.3.0
      env:
        CIBW_ARCHS_MACOS: x86_64
        HATCH_BUILD_HOOKS_ENABLE: 'true'

    - uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: wheelhouse/*.whl
        if-no-files-found: error

  pure-python-wheel-and-sdist:
    name: Build a pure Python wheel and source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install build dependencies
      run: python -m pip install --upgrade build

    - name: Build
      run: python -m build

    - uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: dist/*
        if-no-files-found: error

  binary-wheels-arm:
    name: Build Linux wheels for ARM
    runs-on: ubuntu-latest
    # Very slow, no need to run on PRs
    if: >
      github.event_name == 'push'
      &&
      (github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags'))

    steps:
    - uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.3.0
      env:
        CIBW_ARCHS_LINUX: aarch64
        HATCH_BUILD_HOOKS_ENABLE: 'true'

    - uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: wheelhouse/*.whl
        if-no-files-found: error

  allgood:
    runs-on: ubuntu-latest
    needs:
    - tests
    - linters
    - binary-wheels-standard
    - pure-python-wheel-and-sdist
    - binary-wheels-arm
    steps:
    - run: echo "Great success!"

  pypi-publish:
    # Only publish if all other jobs succeed
    needs: [ allgood ]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: dist

    - name: Push build artifacts to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
